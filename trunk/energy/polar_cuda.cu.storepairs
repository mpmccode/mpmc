/* 

@2010, Jonathan Belof
Space Research Group
Department of Chemistry
University of South Florida

*/

#include <stdlib.h>
#include <string.h>
#include <stdio.h>
#include <values.h>
#include <time.h>
#include <signal.h>
#include <math.h>

#include <physical_constants.h>
#include <structs.h>

#include <cuda.h>

#define WARPSIZE	16
#define BLOCKSIZE	64
#define MAXATOMS	2048	/* maximum N value */
#define DAMP		2.1304	/* exponential damping width */

/* max float value that we will allow for a squared distance */
/* so that when we calculate r^-5 we will not overflow, this is "infinity" */
#define MAXFVALUE	1.0e14

extern "C" { int num_atoms(system_t *); }
extern "C" { void thole_field(system_t *); }


/* XXX TODO: multigpu support */
/* XXX TODO: check with uvt and test for mem leaks */
/* XXX TODO: read pairs from texture memory */

/* DONE: avoided i != j conditional through use of switch */
/* DONE: unrolled all matrix op loops by hand to avoid conditional */
/* DONE: make use of constant memory for unit cell info */
/* DONE: added PK correction and preconditioning */


__constant__ float basis[16];		/* unit cell basis */
__constant__ float recip_basis[16];	/* recip-space basis */
__device__ float4 *dist;

__global__ void thole_pairs_cuda(float4 *pos) {

	__shared__ float4 sposi[WARPSIZE][WARPSIZE];
	__shared__ float4 sposj[WARPSIZE][WARPSIZE];
	float4 dr;
	int bx, by, tx, ty;
	int ibegin, jbegin, jend;
	int i, j, k;


	/* our block/thread indices */
	bx = blockIdx.x;
	by = blockIdx.y;
	tx = threadIdx.x;
	ty = threadIdx.y;

	/* XXX broken */
	ibegin = bx*WARPSIZE*MAXATOMS;
	jbegin = by*WARPSIZE*MAXATOMS;
	jend = jbegin + MAXATOMS;	/* i is the same */

dr.x = dr.y = dr.z = dr.w = 0;

	for(i = ibegin, j = jbegin; j < jend; i += WARPSIZE, j += WARPSIZE) {

		sposi[tx][ty] = pos[i + ty*WARPSIZE + tx];
		sposj[ty][tx] = pos[j + ty*WARPSIZE + tx];
		__syncthreads();

		for(k = 0; k < WARPSIZE; k++) {

			/* XXX pythagorean distance */
			dr.x += sposj[ty][k].x - sposi[k][tx].x;
			dr.y += sposj[ty][k].y - sposi[k][tx].y;
			dr.z += sposj[ty][k].z - sposi[k][tx].z;
			dr.w += dr.x*dr.x + dr.y*dr.y + dr.z*dr.z;

		}
		__syncthreads();

		/* XXX */
		dist[by*WARPSIZE*MAXATOMS + ty*MAXATOMS + bx*WARPSIZE + tx] = dr;

	}

}


#ifdef XXX
__global__ void gpuPdist(float *out, float *in, int n, int m){

	__shared__ float Ys[16][16];
	__shared__ float Xs[16][16];
	int bx = blockIdx.x, by = blockIdx.y;
	int tx = threadIdx.x, ty = threadIdx.y;
	int yBegin = by * 16 * m;
	int xBegin = bx * 16 * m;
	int yEnd = yBegin + m - 1, y, x, k, o;
	float tmp, s = 0;


	for(y=yBegin,x=xBegin;y<=yEnd;y+=16,x+=16){

		Ys[ty][tx] = in[y + ty*m + tx];
		Xs[tx][ty] = in[x + ty*m + tx];
		//*** note the transpose of Xs
		__syncthreads();

		for(k=0;k<16;k++){
			tmp = Ys[ty][k] - Xs[k][tx];
			s += tmp*tmp;
		}

		__syncthreads();

	}

	o = by*16*n + ty*n + bx*16 + tx;
	out[o] = sqrtf(s);

}
#endif /* XXX */



#ifdef XXX
__constant__ float basis[16];		/* unit cell basis */
__constant__ float recip_basis[16];	/* recip-space basis */
__device__ float4 dist[MAXATOMS][MAXATOMS];

/* constructs the pairwise distance matrix */
/* XXX use 2 dimensional thread block */
__global__ void thole_pairs_cuda(float4 *pos) {

	int bid, tid, bsize, gsize;
	int i, j, k;
        float4 dr, dri, img;
	float4 posi, posj;
	float r, sw;
	__shared__ float4 sposj[BLOCKSIZE];
	__shared__ float4 sdist[BLOCKSIZE];
	__shared__ float sbasis[16];
	__shared__ float srecip_basis[16];

	/* get block and thead indices */
	bid = blockIdx.x;
	tid = threadIdx.x;
	gsize = gridDim.x;
	bsize = blockDim.x;

	/* this is the induced dipole that we are summing for */
	i = bid*bsize + tid;
	/* make sure we dont overrun our arrays, this extra work is still cheaper than a conditional */
	i %= MAXATOMS;

	/* unit cell info from constant to shared mem */
	sbasis[0] = basis[0];
	sbasis[1] = basis[1];
	sbasis[2] = basis[2];
	sbasis[3] = basis[3];
	sbasis[4] = basis[4];
	sbasis[5] = basis[5];
	sbasis[6] = basis[6];
	sbasis[7] = basis[7];
	sbasis[8] = basis[8];
	srecip_basis[0] = recip_basis[0];
	srecip_basis[1] = recip_basis[1];
	srecip_basis[2] = recip_basis[2];
	srecip_basis[3] = recip_basis[3];
	srecip_basis[4] = recip_basis[4];
	srecip_basis[5] = recip_basis[5];
	srecip_basis[6] = recip_basis[6];
	srecip_basis[7] = recip_basis[7];
	srecip_basis[8] = recip_basis[8];

	/* position of atom i */
	posi = pos[i];

	/* for each thread block */
	for(j = 0; j < gsize; j++) {

		/* fill the share mem dipole array for this block */
		sposj[tid] = pos[j*bsize+tid];

		/* make sure our shared mem update is complete */
		__syncthreads();

		/* do work with the shared mem array */
		for(k = 0; k < bsize; k++) {

			/* local registers */
			posj = sposj[k];

			/* START MINIMUM IMAGE */
			/* get the particle displacement */
			dr.x = posi.x - posj.x;
			dr.y = posi.y - posj.y;
			dr.z = posi.z - posj.z;
			sw = (float)(!(int)dr.x && !(int)dr.y && !(int)dr.z);	/* delta switch */

			/* matrix multiply with the inverse basis and round */
			img.x = srecip_basis[0]*dr.x + srecip_basis[1]*dr.y + srecip_basis[2]*dr.z;
			img.y = srecip_basis[3]*dr.x + srecip_basis[4]*dr.y + srecip_basis[5]*dr.z;
			img.z = srecip_basis[6]*dr.x + srecip_basis[7]*dr.y + srecip_basis[8]*dr.z;
			img.x = rintf(img.x);
			img.y = rintf(img.y);
			img.z = rintf(img.z);

			/* matrix multiply to project back into our basis */
			dri.x = sbasis[0]*img.x + sbasis[1]*img.y + sbasis[2]*img.z;
			dri.y = sbasis[3]*img.x + sbasis[4]*img.y + sbasis[5]*img.z;
			dri.z = sbasis[6]*img.x + sbasis[7]*img.y + sbasis[8]*img.z;

			/* now correct the displacement */
			dri.x = dr.x - dri.x;
			dri.y = dr.y - dri.y;
			dri.z = dr.z - dri.z;
			r = dri.x*dri.x + dri.y*dri.y + dri.z*dri.z;
			r += sw*MAXFVALUE;
			r = sqrtf(r);
			/* END MINIMUM IMAGE */

			/* store distance in shared memory */
			sdist[k].x = dri.x;
			sdist[k].y = dri.y;
			sdist[k].z = dri.z;
			sdist[k].w = r;

		} /* end k */

		/* store sdist in global mem */
		dist[i][j*bsize+tid] = sdist[tid];

	} /* end j */


}

#endif /* XXX */


/* kernel that builds field tensor and performs a single iteration through the dipole field equations */
__global__ void thole_iterative_cuda(float4 *arg_ptr) {

	int bid, tid, bsize, gsize;
        int i, j, k;
	float4 *estat, *mu_in, *mu_out, *eind_out;
	float4 pos, estati, mu, eind;
	float dx, dy, dz, r, r2, r3, r5;
        float damp, damping_term1, damping_term2;	/* exponential damping func */
	__shared__ float4 smu[BLOCKSIZE];
	__shared__ float4 spos[BLOCKSIZE];
     	/* dipole field tensor */
	/* 0 = xx, 1 = xy, 2 = xz */
	/* 3 = yy, 4 = yz, 5 = zz */
	float Tij[8];

	/* get block and thead indices */
	bid = blockIdx.x;
	tid = threadIdx.x;
	gsize = gridDim.x;
	bsize = blockDim.x;

	/* this is the induced dipole that we are summing for */
	i = bid*bsize + tid;
	/* make sure we dont overrun our arrays, this extra work is still cheaper than a conditional */
	i %= MAXATOMS;

	/* set the arrays */
	estat = arg_ptr; arg_ptr += MAXATOMS;
	mu_in = arg_ptr; arg_ptr += MAXATOMS;
	mu_out = arg_ptr; arg_ptr += MAXATOMS;
	eind_out = arg_ptr;

	/* set the damping width */
	damp = DAMP;

	/* clear the induced field */
	eind.x = eind.y = eind.z = eind.w = 0;

	/* locate estat fetch close to pos fetching */
	estati = estat[i];


	/* for each thread block */
	for(j = 0; j < gsize; j++) {

		/* fill the share mem dipole array for this block */
		smu[tid] = mu_in[j*bsize+tid];
		spos[tid] =  dist[i*MAXATOMS+j*bsize+tid];

		/* make sure our shared mem update is complete */
		__syncthreads();

		/* do work with the shared mem array */
		for(k = 0; k < bsize; k++) {

			/* fetch r */
			pos = spos[k];
			dx = pos.x;
			dy = pos.y;
			dz = pos.z;
			r = pos.w;

			/* various powers of r needed */
			r2 = r*r;
			r3 = r2*r;
			r5 = r3*r2;
			r3 = 1.0/r3;
			r5 = 1.0/r5;

			/* damping terms */
			damping_term1 = 1.0 - __expf(-damp*r)*(0.5*damp*damp*r2 + damp*r + 1.0);
			damping_term2 = 1.0 - __expf(-damp*r)*(damp*damp*damp*r*r2/6.0 + 0.5*damp*damp*r2 + damp*r + 1.0);

			/* construct the Tij tensor field, unrolled by hand to avoid conditional on the diagonal terms */
			damping_term1 *= r3;
			damping_term2 *= -3.0*r5;
			/* exploit symmetry */
			/* 0 = xx, 1 = xy, 2 = xz */
			/* 3 = yy, 4 = yz, 5 = zz */
			Tij[0] = dx*dx*damping_term2 + damping_term1;
			Tij[1] = dx*dy*damping_term2;
			Tij[2] = dx*dz*damping_term2;
			Tij[3] = dy*dy*damping_term2 + damping_term1;
			Tij[4] = dy*dz*damping_term2;
			Tij[5] = dz*dz*damping_term2 + damping_term1;

			/* contract dipole with the tensor */
			mu = smu[k];
			eind.x -= Tij[0]*mu.x + Tij[1]*mu.y + Tij[2]*mu.z;
			eind.y -= Tij[1]*mu.x + Tij[3]*mu.y + Tij[4]*mu.z;
			eind.z -= Tij[2]*mu.x + Tij[4]*mu.y + Tij[5]*mu.z;

		} /* end k */

	} /* end j */

	/* update the ith induced field vector and dipole in global mem */
	mu_out[i].x = estati.w*(estati.x + eind.x);
	mu_out[i].y = estati.w*(estati.y + eind.y);
	mu_out[i].z = estati.w*(estati.z + eind.z);
	eind_out[i].x = eind.x;
	eind_out[i].y = eind.y;
	eind_out[i].z = eind.z;

#ifdef XXX
	/* Gauss-Seidel update */
	mu_in[i].x = mu_out[i].x;
	mu_in[i].y = mu_out[i].y;
	mu_in[i].z = mu_out[i].z;
#endif /* XXX */

}



extern "C" {

float polar_cuda(system_t *system) {

	molecule_t *molecule_ptr;
	atom_t *atom_ptr;
	int current_iteration, i, p, q;	/* local counters */
	int N, gridsize, blocksize;
	float *host_basis, *host_recip_basis;
	float4 *host_arg_ptr, *tmp_ptr, *host_pos, *host_estat, *host_mu_in, *host_mu_out, *host_eind_out;
	float4 *arg_ptr, *pos;	/* on device */
	float4 *host_echg_out;	/* induced field change for Palmo-Krimm correction */
	/* polarization energy, to be returned */
	float potential;

	/* determine N */
	N = num_atoms(system);
	if(N >= MAXATOMS) {
		fprintf(stderr, "POLAR_CUDA: error, N = %d exceeds MAXATOMS = %d\n", N, MAXATOMS);
		return(-1);
	}

	/* grid/block size */
	gridsize = N/BLOCKSIZE + (N%BLOCKSIZE == 0?0:1);
	blocksize = BLOCKSIZE;

	/* calculate the field vectors */
	thole_field(system);

	/* allocate temporary host arrays */
	host_pos = (float4 *)calloc(MAXATOMS, sizeof(float4));
	host_basis = (float *)calloc(16, sizeof(float));
	host_recip_basis = (float *)calloc(16, sizeof(float));
	host_arg_ptr = (float4 *)calloc(4*MAXATOMS, sizeof(float4));
	tmp_ptr = host_arg_ptr;
	host_estat = tmp_ptr; tmp_ptr += MAXATOMS;
	host_mu_in = tmp_ptr; tmp_ptr += MAXATOMS;
	host_mu_out = tmp_ptr; tmp_ptr += MAXATOMS;
	host_eind_out = tmp_ptr;
	if(system->polar_palmo) host_echg_out = (float4 *)calloc(MAXATOMS, sizeof(float4));

	/* set some of the above arrays */
	for(molecule_ptr = system->molecules, i = 0; molecule_ptr; molecule_ptr = molecule_ptr->next) {
		for(atom_ptr = molecule_ptr->atoms; atom_ptr; atom_ptr = atom_ptr->next, i++) {

			host_pos[i].x = (float)atom_ptr->pos[0];
			host_pos[i].y = (float)atom_ptr->pos[1];
			host_pos[i].z = (float)atom_ptr->pos[2];

			host_mu_in[i].x = (float)system->polar_gamma*atom_ptr->polarizability*atom_ptr->ef_static[0];
			host_mu_in[i].y = (float)system->polar_gamma*atom_ptr->polarizability*atom_ptr->ef_static[1];
			host_mu_in[i].z = (float)system->polar_gamma*atom_ptr->polarizability*atom_ptr->ef_static[2];

			host_estat[i].x = (float)atom_ptr->ef_static[0];
			host_estat[i].y = (float)atom_ptr->ef_static[1];
			host_estat[i].z = (float)atom_ptr->ef_static[2];
			/* stuff the polarizability in the 4th float of estat */
			host_estat[i].w = (float)atom_ptr->polarizability;

		}
	}

	/* copy over the basis matrix */
	for(p = 0; p < 3; p++) {
		for(q = 0; q < 3; q++) {
			host_basis[p*3+q] = (float)system->pbc->basis[p][q];
			host_recip_basis[p*3+q] = (float)system->pbc->reciprocal_basis[p][q];
		}
	}

	/* copy the array elements to constant memory */
	cudaMemcpyToSymbol(basis, host_basis, 16*sizeof(float), 0, cudaMemcpyHostToDevice);
	cudaMemcpyToSymbol(recip_basis, host_recip_basis, 16*sizeof(float), 0, cudaMemcpyHostToDevice);


	/* alloc aligned memory */
	cudaMalloc((void **)&arg_ptr, 4*MAXATOMS*sizeof(float4));
	cudaMalloc((void **)&pos, MAXATOMS*sizeof(float4));
	cudaMemcpy(arg_ptr, host_arg_ptr, 4*MAXATOMS*sizeof(float4), cudaMemcpyHostToDevice);
	cudaMemcpy(pos, host_pos, MAXATOMS*sizeof(float4), cudaMemcpyHostToDevice);
	/* XXX make this textured */
	cudaMalloc((void **)&dist, MAXATOMS*MAXATOMS*sizeof(float4));

//#ifdef XXX
	/* get the pairwise distances with PBC */
	dim3 dimgrid(MAXATOMS, MAXATOMS);
	dim3 dimblock(BLOCKSIZE, BLOCKSIZE);
	thole_pairs_cuda<<<dimgrid, dimblock>>>(pos);
//#endif /* XXX */

	/* iterate until we are finished */
	for(current_iteration = 0; current_iteration < system->polar_max_iter; current_iteration++) {

		/* launch the kernel */
		thole_iterative_cuda<<<gridsize, blocksize>>>(arg_ptr);

		/* feed dipoles back in for another pass */
		cudaMemcpy((arg_ptr+1*MAXATOMS), (arg_ptr+2*MAXATOMS), MAXATOMS*sizeof(float4), cudaMemcpyDeviceToDevice);

	}

	/* copy back the results */
	cudaMemcpy(host_mu_out, (arg_ptr+2*MAXATOMS), MAXATOMS*sizeof(float4), cudaMemcpyDeviceToHost);
	cudaMemcpy(host_eind_out, (arg_ptr+3*MAXATOMS), MAXATOMS*sizeof(float4), cudaMemcpyDeviceToHost);

	/* if PK active, do one more iteration to get the change in induced field */
	if(system->polar_palmo) {

		thole_iterative_cuda<<<gridsize, blocksize>>>(arg_ptr);
		cudaMemcpy(host_echg_out, (arg_ptr+3*MAXATOMS), MAXATOMS*sizeof(float4), cudaMemcpyDeviceToHost);

	}


	/* store the dipole vectors in the linked list on the host */
	for(molecule_ptr = system->molecules, i = 0, potential = 0; molecule_ptr; molecule_ptr = molecule_ptr->next) {
		for(atom_ptr = molecule_ptr->atoms; atom_ptr; atom_ptr = atom_ptr->next, i++) {

			/* store dipole and induced field */
			atom_ptr->mu[0] = (double)host_mu_out[i].x;
			atom_ptr->mu[1] = (double)host_mu_out[i].y;
			atom_ptr->mu[2] = (double)host_mu_out[i].z;
			atom_ptr->ef_induced[0] = (double)host_eind_out[i].x;
			atom_ptr->ef_induced[1] = (double)host_eind_out[i].y;
			atom_ptr->ef_induced[2] = (double)host_eind_out[i].z;

			/* calculate the polarization energy as 1/2 mu*E */
			potential += atom_ptr->mu[0]*atom_ptr->ef_static[0];
			potential += atom_ptr->mu[1]*atom_ptr->ef_static[1];
			potential += atom_ptr->mu[2]*atom_ptr->ef_static[2];

			if(system->polar_palmo) {

				atom_ptr->ef_induced_change[0] = (double)(host_echg_out[i].x - host_eind_out[i].x);
				atom_ptr->ef_induced_change[1] = (double)(host_echg_out[i].y - host_eind_out[i].y);
				atom_ptr->ef_induced_change[2] = (double)(host_echg_out[i].z - host_eind_out[i].z);
				potential += atom_ptr->mu[0]*atom_ptr->ef_induced_change[0];
				potential += atom_ptr->mu[1]*atom_ptr->ef_induced_change[1];
				potential += atom_ptr->mu[2]*atom_ptr->ef_induced_change[2];

			}

		}
	}
	potential *= -0.5;


	/* free the host arrays */
	free(host_arg_ptr);
	free(host_pos);
	free(host_basis);
	free(host_recip_basis);

	/* free the device array */
	cudaFree(arg_ptr);
	cudaFree(pos);

	/* return the polarization energy */
	return(potential);

}

} /* extern "C" */

